% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/constructive_heuristic.R
\name{constructive_heuristic}
\alias{constructive_heuristic}
\title{Generate an initial group allocation solution based on a greedy heuristic.}
\usage{
constructive_heuristic(C, delta, w = c(0.5, 0.4, 0.1), X0 = NULL, rho = 1e-04)
}
\arguments{
\item{C}{matrix of class counts per group. Commonly calculated using
[consolidate_class_counts()]. Each position \eqn{c_{ij}} contains
the number of examples of the j-th Class contained in the i-th group.}

\item{delta}{vector of desired split proportions (must add up to one). It
is useful (but not mandatory) to use a vector delta that is sorted
in decreasing order, to prevent later confusion.}

\item{w}{vector of weights for function aggregation. Must be of
length 3 and add to 1. All weights must be non-negative.}

\item{X0}{Initial (partial) allocation. Must be a binary numerical matrix
containing only zeroes and ones. Must have `nrow(C)` columns and `length(delta)`
rows. Each position \eqn{x_{ki}}
indicates the allocation (or not) of the i-th group to the k-th split.
Each group can only be allocated to (at most) one split (i.e.,
`colSums(X0)` \eqn{\leq 1}). The constructive heuristic will not change the
pre-allocations provided in X0, it will only allocate the remaining groups
to the splits.}

\item{rho}{small positive value for augmented Tchebycheff scalarisation.}
}
\value{
Matrix of binary allocation variables. Each position \eqn{x_{ki}}
indicates the allocation or not of the i-th group to the k-th split.
**NOTE**: The allocation matrix is always returned with splits in decreasing
order of size.
}
\description{
Generates an initial allocation matrix.
}
\examples{

library(moses)

\dontrun{
fpath1 <- system.file("diamond", "bfv_proteins.fa", package="moses")
fpath2 <- system.file("diamond", "bfv_peptides.rds", package="moses")

# Calculate clusters using sequence data
mycl <- extract_clusters_cdhit(seqfile = fpath1, diss_threshold = 0.2)

# Load data frame with classes
df <- readRDS(fpath2)

# Consolidate class counts
C <- consolidate_class_counts(mycl$clusters, df)

# Desired allocation proportions
delta <- c(.6, .2, .2)

# Objective weights
w = c(.5, .4, .1)

X <- constructive_heuristic(C, delta, w)

# Check allocation:
M <- X \%*\% C

data.frame(Desired.prop = sort(delta, decreasing = TRUE),
           Actual.prop  = rowSums(M) / sum(M),
           Groups.per.split = rowSums(X))

# Balance of data in each split
Dbal <- cbind(data.frame(Overall = colSums(C) / sum(C)),
              apply(M, 1, function(z) z/sum(z)))
names(Dbal)[-1] <- paste0("Split.", names(Dbal)[-1])
Dbal
}
}
